{"version":3,"sources":["../src/utils/cache.ts","../src/utils/config.ts","../src/utils/deps.ts","../src/utils/framework.ts","../src/utils/fs.ts","../src/utils/paths.ts","../src/utils/registry.ts","../src/utils/rollback.ts","../src/utils/tailwind.ts","../src/commands/add.ts","../src/commands/init.ts","../src/commands/list.ts","../src/cli.ts"],"names":["fs","path","packageJson","chalk","satisfies","ora"],"mappings":"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","file":"cli.js","sourcesContent":["import path from \"node:path\";\nimport fs from \"fs-extra\";\n\nfunction getCacheBaseDir(): string {\n\tconst custom = process.env.NOCTA_CACHE_DIR;\n\tif (custom && custom.trim()) return custom;\n\treturn path.join(process.cwd(), \".nocta-cache\");\n}\n\nfunction resolveCachePath(relPath: string): string {\n\tconst safeRel = relPath.replace(/^\\/+/, \"\");\n\treturn path.join(getCacheBaseDir(), safeRel);\n}\n\nasync function ensureDirFor(filePath: string): Promise<void> {\n\tawait fs.ensureDir(path.dirname(filePath));\n}\n\nexport async function readCacheText(\n\trelPath: string,\n\tttlMs?: number,\n\topts?: { acceptStale?: boolean },\n): Promise<string | null> {\n\tconst fullPath = resolveCachePath(relPath);\n\tif (!(await fs.pathExists(fullPath))) return null;\n\n\ttry {\n\t\tif (!opts?.acceptStale && typeof ttlMs === \"number\") {\n\t\t\tconst stat = await fs.stat(fullPath);\n\t\t\tconst ageMs = Date.now() - stat.mtimeMs;\n\t\t\tif (ageMs > ttlMs) return null;\n\t\t}\n\t\treturn await fs.readFile(fullPath, \"utf8\");\n\t} catch {\n\t\treturn null;\n\t}\n}\n\nexport async function writeCacheText(\n\trelPath: string,\n\tcontent: string,\n): Promise<void> {\n\tconst fullPath = resolveCachePath(relPath);\n\tawait ensureDirFor(fullPath);\n\tawait fs.writeFile(fullPath, content, \"utf8\");\n}\n\nexport function getCacheDir(): string {\n\treturn getCacheBaseDir();\n}\n","import path from \"node:path\";\nimport fs from \"fs-extra\";\nimport type { Config } from \"../types.js\";\n\nexport async function readConfig(): Promise<Config | null> {\n\tconst configPath = path.join(process.cwd(), \"nocta.config.json\");\n\n\tif (!(await fs.pathExists(configPath))) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn await fs.readJson(configPath);\n\t} catch (error) {\n\t\tthrow new Error(`Failed to read nocta.config.json: ${error}`);\n\t}\n}\n\nexport async function writeConfig(config: Config): Promise<void> {\n\tconst configPath = path.join(process.cwd(), \"nocta.config.json\");\n\tconst configWithSchema: Config = {\n\t\t$schema: \"https://nocta-ui.com/registry/config-schema.json\",\n\t\t...config,\n\t};\n\tconfigWithSchema.$schema = \"https://nocta-ui.com/registry/config-schema.json\";\n\tawait fs.writeJson(configPath, configWithSchema, { spaces: 2 });\n}\n","import { execSync } from \"node:child_process\";\nimport { existsSync, readFileSync } from \"node:fs\";\nimport { join } from \"node:path\";\nimport fs from \"fs-extra\";\nimport { gte, minVersion, satisfies } from \"semver\";\n\nexport interface RequirementIssue {\n\tname: string;\n\trequired: string;\n\tinstalled?: string;\n\tdeclared?: string;\n\treason: \"missing\" | \"outdated\" | \"unknown\";\n}\n\nexport async function getInstalledDependencies(): Promise<\n\tRecord<string, string>\n> {\n\ttry {\n\t\tconst packageJsonPath = join(process.cwd(), \"package.json\");\n\n\t\tif (!existsSync(packageJsonPath)) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst packageJson = JSON.parse(readFileSync(packageJsonPath, \"utf8\"));\n\n\t\tconst allDeps = {\n\t\t\t...packageJson.dependencies,\n\t\t\t...packageJson.devDependencies,\n\t\t};\n\n\t\tconst actualVersions: Record<string, string> = {};\n\n\t\tfor (const depName of Object.keys(allDeps)) {\n\t\t\ttry {\n\t\t\t\tconst nodeModulesPath = join(\n\t\t\t\t\tprocess.cwd(),\n\t\t\t\t\t\"node_modules\",\n\t\t\t\t\tdepName,\n\t\t\t\t\t\"package.json\",\n\t\t\t\t);\n\n\t\t\t\tif (existsSync(nodeModulesPath)) {\n\t\t\t\t\tconst depPackageJson = JSON.parse(\n\t\t\t\t\t\treadFileSync(nodeModulesPath, \"utf8\"),\n\t\t\t\t\t);\n\t\t\t\t\tactualVersions[depName] = depPackageJson.version;\n\t\t\t\t} else {\n\t\t\t\t\tactualVersions[depName] = allDeps[depName];\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tactualVersions[depName] = allDeps[depName];\n\t\t\t}\n\t\t}\n\n\t\treturn actualVersions;\n\t} catch {\n\t\treturn {};\n\t}\n}\n\nexport async function installDependencies(\n\tdependencies: Record<string, string>,\n): Promise<void> {\n\tconst deps = Object.keys(dependencies);\n\tif (deps.length === 0) return;\n\n\tlet packageManager = \"npm\";\n\tif (await fs.pathExists(\"yarn.lock\")) {\n\t\tpackageManager = \"yarn\";\n\t} else if (await fs.pathExists(\"pnpm-lock.yaml\")) {\n\t\tpackageManager = \"pnpm\";\n\t}\n\n\tconst depsWithVersions = deps.map(\n\t\t(depName) => `${depName}@${dependencies[depName]}`,\n\t);\n\n\tconst installCmd =\n\t\tpackageManager === \"yarn\"\n\t\t\t? `yarn add ${depsWithVersions.join(\" \")}`\n\t\t\t: packageManager === \"pnpm\"\n\t\t\t\t? `pnpm add ${depsWithVersions.join(\" \")}`\n\t\t\t\t: `npm install ${depsWithVersions.join(\" \")}`;\n\n\tconsole.log(`Installing dependencies with ${packageManager}...`);\n\texecSync(installCmd, { stdio: \"inherit\" });\n}\n\nexport async function checkProjectRequirements(\n\trequirements: Record<string, string>,\n): Promise<RequirementIssue[]> {\n\tconst installed = await getInstalledDependencies();\n\tconst issues: RequirementIssue[] = [];\n\n\tfor (const [name, requiredRange] of Object.entries(requirements)) {\n\t\tconst installedSpec = installed[name];\n\t\tif (!installedSpec) {\n\t\t\tissues.push({\n\t\t\t\tname,\n\t\t\t\trequired: requiredRange,\n\t\t\t\treason: \"missing\",\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst modulePackagePath = join(\n\t\t\tprocess.cwd(),\n\t\t\t\"node_modules\",\n\t\t\t...name.split(\"/\"),\n\t\t\t\"package.json\",\n\t\t);\n\t\tif (!existsSync(modulePackagePath)) {\n\t\t\tissues.push({\n\t\t\t\tname,\n\t\t\t\trequired: requiredRange,\n\t\t\t\tdeclared: installedSpec,\n\t\t\t\treason: \"missing\",\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst resolvedVersion = minVersion(installedSpec);\n\t\tconst minimumRequired = minVersion(requiredRange);\n\t\tconst rangeSatisfied = resolvedVersion\n\t\t\t? satisfies(resolvedVersion, requiredRange, {\n\t\t\t\t\tincludePrerelease: true,\n\t\t\t\t})\n\t\t\t: false;\n\t\tconst higherVersionSatisfied =\n\t\t\tresolvedVersion && minimumRequired\n\t\t\t\t? gte(resolvedVersion, minimumRequired)\n\t\t\t\t: false;\n\n\t\tif (!resolvedVersion || (!rangeSatisfied && !higherVersionSatisfied)) {\n\t\t\tconst normalizedVersion = resolvedVersion?.version;\n\t\t\tissues.push({\n\t\t\t\tname,\n\t\t\t\trequired: requiredRange,\n\t\t\t\tinstalled: normalizedVersion,\n\t\t\t\tdeclared:\n\t\t\t\t\tnormalizedVersion && normalizedVersion === installedSpec\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: installedSpec,\n\t\t\t\treason: resolvedVersion ? \"outdated\" : \"unknown\",\n\t\t\t});\n\t\t}\n\t}\n\n\treturn issues;\n}\n","import fs from \"fs-extra\";\n\ninterface PackageJson {\n\tdependencies?: Record<string, string>;\n\tdevDependencies?: Record<string, string>;\n\t[key: string]: unknown;\n}\n\nexport interface FrameworkDetection {\n\tframework: \"nextjs\" | \"vite-react\" | \"react-router\" | \"unknown\";\n\tversion?: string;\n\tdetails: {\n\t\thasConfig: boolean;\n\t\thasReactDependency: boolean;\n\t\thasFrameworkDependency: boolean;\n\t\tappStructure?: \"app-router\" | \"pages-router\" | \"unknown\";\n\t\tconfigFiles: string[];\n\t};\n}\n\nexport async function isTypeScriptProject(): Promise<boolean> {\n\ttry {\n\t\tconst packageJson = await fs.readJson(\"package.json\");\n\t\tconst dependencies = {\n\t\t\t...packageJson.dependencies,\n\t\t\t...packageJson.devDependencies,\n\t\t};\n\n\t\tconst hasTypeScript =\n\t\t\t\"typescript\" in dependencies || \"@types/node\" in dependencies;\n\t\tconst hasTsConfig = await fs.pathExists(\"tsconfig.json\");\n\n\t\treturn hasTypeScript || hasTsConfig;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nexport async function detectFramework(): Promise<FrameworkDetection> {\n\ttry {\n\t\tlet packageJson: PackageJson = {};\n\t\ttry {\n\t\t\tpackageJson = (await fs.readJson(\"package.json\")) as PackageJson;\n\t\t} catch {\n\t\t\treturn {\n\t\t\t\tframework: \"unknown\",\n\t\t\t\tdetails: {\n\t\t\t\t\thasConfig: false,\n\t\t\t\t\thasReactDependency: false,\n\t\t\t\t\thasFrameworkDependency: false,\n\t\t\t\t\tconfigFiles: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst dependencies = {\n\t\t\t...packageJson.dependencies,\n\t\t\t...packageJson.devDependencies,\n\t\t};\n\t\tconst hasReact = \"react\" in dependencies;\n\n\t\tconst nextConfigFiles = [\n\t\t\t\"next.config.js\",\n\t\t\t\"next.config.mjs\",\n\t\t\t\"next.config.ts\",\n\t\t\t\"next.config.cjs\",\n\t\t];\n\t\tconst foundNextConfigs: string[] = [];\n\t\tfor (const config of nextConfigFiles) {\n\t\t\tif (await fs.pathExists(config)) {\n\t\t\t\tfoundNextConfigs.push(config);\n\t\t\t}\n\t\t}\n\n\t\tconst hasNext = \"next\" in dependencies;\n\t\tif (hasNext || foundNextConfigs.length > 0) {\n\t\t\tlet appStructure: \"app-router\" | \"pages-router\" | \"unknown\" = \"unknown\";\n\n\t\t\tconst appRouterPaths = [\n\t\t\t\t\"app/layout.tsx\",\n\t\t\t\t\"app/layout.ts\",\n\t\t\t\t\"app/layout.jsx\",\n\t\t\t\t\"app/layout.js\",\n\t\t\t\t\"src/app/layout.tsx\",\n\t\t\t\t\"src/app/layout.ts\",\n\t\t\t\t\"src/app/layout.jsx\",\n\t\t\t\t\"src/app/layout.js\",\n\t\t\t];\n\n\t\t\tfor (const layoutPath of appRouterPaths) {\n\t\t\t\tif (await fs.pathExists(layoutPath)) {\n\t\t\t\t\tappStructure = \"app-router\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (appStructure === \"unknown\") {\n\t\t\t\tconst pagesRouterPaths = [\n\t\t\t\t\t\"pages/_app.tsx\",\n\t\t\t\t\t\"pages/_app.ts\",\n\t\t\t\t\t\"pages/_app.jsx\",\n\t\t\t\t\t\"pages/_app.js\",\n\t\t\t\t\t\"pages/index.tsx\",\n\t\t\t\t\t\"pages/index.ts\",\n\t\t\t\t\t\"pages/index.jsx\",\n\t\t\t\t\t\"pages/index.js\",\n\t\t\t\t\t\"src/pages/_app.tsx\",\n\t\t\t\t\t\"src/pages/_app.ts\",\n\t\t\t\t\t\"src/pages/_app.jsx\",\n\t\t\t\t\t\"src/pages/_app.js\",\n\t\t\t\t\t\"src/pages/index.tsx\",\n\t\t\t\t\t\"src/pages/index.ts\",\n\t\t\t\t\t\"src/pages/index.jsx\",\n\t\t\t\t\t\"src/pages/index.js\",\n\t\t\t\t];\n\n\t\t\t\tfor (const pagePath of pagesRouterPaths) {\n\t\t\t\t\tif (await fs.pathExists(pagePath)) {\n\t\t\t\t\t\tappStructure = \"pages-router\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tframework: \"nextjs\",\n\t\t\t\tversion: dependencies.next,\n\t\t\t\tdetails: {\n\t\t\t\t\thasConfig: foundNextConfigs.length > 0,\n\t\t\t\t\thasReactDependency: hasReact,\n\t\t\t\t\thasFrameworkDependency: hasNext,\n\t\t\t\t\tappStructure,\n\t\t\t\t\tconfigFiles: foundNextConfigs,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst reactRouterConfigFiles = [\n\t\t\t\"react-router.config.ts\",\n\t\t\t\"react-router.config.js\",\n\t\t];\n\t\tconst foundReactRouterConfigs: string[] = [];\n\t\tfor (const config of reactRouterConfigFiles) {\n\t\t\tif (await fs.pathExists(config)) {\n\t\t\t\tfoundReactRouterConfigs.push(config);\n\t\t\t}\n\t\t}\n\n\t\tconst hasReactRouter = \"react-router\" in dependencies;\n\t\tconst hasReactRouterDev = \"@react-router/dev\" in dependencies;\n\t\tconst hasRemixRunReact = \"@remix-run/react\" in dependencies;\n\n\t\tif ((hasReactRouter || hasReactRouterDev || hasRemixRunReact) && hasReact) {\n\t\t\tlet isReactRouterFramework = false;\n\n\t\t\tconst reactRouterIndicators = [\n\t\t\t\t\"app/routes.ts\",\n\t\t\t\t\"app/routes.tsx\",\n\t\t\t\t\"app/routes.js\",\n\t\t\t\t\"app/routes.jsx\",\n\t\t\t\t\"app/root.tsx\",\n\t\t\t\t\"app/root.ts\",\n\t\t\t\t\"app/root.jsx\",\n\t\t\t\t\"app/root.js\",\n\t\t\t\t\"app/entry.client.tsx\",\n\t\t\t\t\"app/entry.client.ts\",\n\t\t\t\t\"app/entry.client.jsx\",\n\t\t\t\t\"app/entry.client.js\",\n\t\t\t\t\"app/entry.server.tsx\",\n\t\t\t\t\"app/entry.server.ts\",\n\t\t\t\t\"app/entry.server.jsx\",\n\t\t\t\t\"app/entry.server.js\",\n\t\t\t];\n\n\t\t\tfor (const indicator of reactRouterIndicators) {\n\t\t\t\tif (await fs.pathExists(indicator)) {\n\t\t\t\t\tisReactRouterFramework = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasReactRouterDev || foundReactRouterConfigs.length > 0) {\n\t\t\t\tisReactRouterFramework = true;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\thasRemixRunReact &&\n\t\t\t\t!(await fs.pathExists(\"remix.config.js\")) &&\n\t\t\t\t!(await fs.pathExists(\"remix.config.ts\"))\n\t\t\t) {\n\t\t\t\tisReactRouterFramework = true;\n\t\t\t}\n\n\t\t\tif (isReactRouterFramework) {\n\t\t\t\treturn {\n\t\t\t\t\tframework: \"react-router\",\n\t\t\t\t\tversion:\n\t\t\t\t\t\tdependencies[\"react-router\"] ||\n\t\t\t\t\t\tdependencies[\"@react-router/dev\"] ||\n\t\t\t\t\t\tdependencies[\"@remix-run/react\"],\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\thasConfig: foundReactRouterConfigs.length > 0,\n\t\t\t\t\t\thasReactDependency: hasReact,\n\t\t\t\t\t\thasFrameworkDependency:\n\t\t\t\t\t\t\thasReactRouter || hasReactRouterDev || hasRemixRunReact,\n\t\t\t\t\t\tconfigFiles: foundReactRouterConfigs,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst viteConfigFiles = [\n\t\t\t\"vite.config.js\",\n\t\t\t\"vite.config.ts\",\n\t\t\t\"vite.config.mjs\",\n\t\t\t\"vite.config.cjs\",\n\t\t];\n\t\tconst foundViteConfigs: string[] = [];\n\t\tfor (const config of viteConfigFiles) {\n\t\t\tif (await fs.pathExists(config)) {\n\t\t\t\tfoundViteConfigs.push(config);\n\t\t\t}\n\t\t}\n\n\t\tconst hasVite = \"vite\" in dependencies;\n\t\tconst hasViteReactPlugin =\n\t\t\t\"@vitejs/plugin-react\" in dependencies ||\n\t\t\t\"@vitejs/plugin-react-swc\" in dependencies;\n\n\t\tif ((hasVite || foundViteConfigs.length > 0) && hasReact) {\n\t\t\tlet isReactProject = false;\n\n\t\t\tif (hasViteReactPlugin) {\n\t\t\t\tisReactProject = true;\n\t\t\t}\n\n\t\t\tif (!isReactProject) {\n\t\t\t\tconst viteReactIndicators = [\n\t\t\t\t\t\"src/App.tsx\",\n\t\t\t\t\t\"src/App.jsx\",\n\t\t\t\t\t\"src/App.ts\",\n\t\t\t\t\t\"src/App.js\",\n\t\t\t\t\t\"src/main.tsx\",\n\t\t\t\t\t\"src/main.jsx\",\n\t\t\t\t\t\"src/main.ts\",\n\t\t\t\t\t\"src/main.js\",\n\t\t\t\t\t\"src/index.tsx\",\n\t\t\t\t\t\"src/index.jsx\",\n\t\t\t\t\t\"src/index.ts\",\n\t\t\t\t\t\"src/index.js\",\n\t\t\t\t];\n\n\t\t\t\tfor (const indicator of viteReactIndicators) {\n\t\t\t\t\tif (await fs.pathExists(indicator)) {\n\t\t\t\t\t\tisReactProject = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isReactProject && (await fs.pathExists(\"index.html\"))) {\n\t\t\t\ttry {\n\t\t\t\t\tconst htmlContent = await fs.readFile(\"index.html\", \"utf8\");\n\t\t\t\t\tconst hasReactRoot =\n\t\t\t\t\t\thtmlContent.includes('id=\"root\"') ||\n\t\t\t\t\t\thtmlContent.includes(\"id='root'\");\n\t\t\t\t\tconst hasViteScript =\n\t\t\t\t\t\thtmlContent.includes(\"/src/main.\") ||\n\t\t\t\t\t\thtmlContent.includes(\"/src/index.\") ||\n\t\t\t\t\t\thtmlContent.includes('type=\"module\"');\n\n\t\t\t\t\tif (hasReactRoot && hasViteScript) {\n\t\t\t\t\t\tisReactProject = true;\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isReactProject) {\n\t\t\t\treturn {\n\t\t\t\t\tframework: \"vite-react\",\n\t\t\t\t\tversion: dependencies.vite,\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\thasConfig: foundViteConfigs.length > 0,\n\t\t\t\t\t\thasReactDependency: hasReact,\n\t\t\t\t\t\thasFrameworkDependency: hasVite,\n\t\t\t\t\t\tconfigFiles: foundViteConfigs,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (hasReact) {\n\t\t\tconst craIndicators = [\n\t\t\t\t\"react-scripts\" in dependencies,\n\t\t\t\tawait fs.pathExists(\"public/index.html\"),\n\t\t\t];\n\t\t\tif (craIndicators.some(Boolean)) {\n\t\t\t\treturn {\n\t\t\t\t\tframework: \"unknown\",\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\thasConfig: false,\n\t\t\t\t\t\thasReactDependency: true,\n\t\t\t\t\t\thasFrameworkDependency: false,\n\t\t\t\t\t\tconfigFiles: [],\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tframework: \"unknown\",\n\t\t\tdetails: {\n\t\t\t\thasConfig: false,\n\t\t\t\thasReactDependency: hasReact,\n\t\t\t\thasFrameworkDependency: false,\n\t\t\t\tconfigFiles: [],\n\t\t\t},\n\t\t};\n\t} catch {\n\t\treturn {\n\t\t\tframework: \"unknown\",\n\t\t\tdetails: {\n\t\t\t\thasConfig: false,\n\t\t\t\thasReactDependency: false,\n\t\t\t\thasFrameworkDependency: false,\n\t\t\t\tconfigFiles: [],\n\t\t\t},\n\t\t};\n\t}\n}\n","import path from \"node:path\";\nimport fs from \"fs-extra\";\n\nexport async function fileExists(filePath: string): Promise<boolean> {\n\tconst fullPath = path.join(process.cwd(), filePath);\n\treturn await fs.pathExists(fullPath);\n}\n\nexport async function writeComponentFile(\n\tfilePath: string,\n\tcontent: string,\n): Promise<void> {\n\tconst fullPath = path.join(process.cwd(), filePath);\n\tawait fs.ensureDir(path.dirname(fullPath));\n\tawait fs.writeFile(fullPath, content, \"utf8\");\n}\n","import path from \"node:path\";\nimport type { Config } from \"../types.js\";\n\nexport function resolveComponentPath(\n\tcomponentFilePath: string,\n\tconfig: Config,\n): string {\n\tconst fileName = path.basename(componentFilePath);\n\treturn path.join(config.aliases.components, fileName);\n}\n","import type { Component, Registry } from \"../types.js\";\nimport { readCacheText, writeCacheText } from \"./cache.js\";\n\nconst REGISTRY_BASE_URL = \"https://nocta-ui.com/registry\";\nconst REGISTRY_URL = `${REGISTRY_BASE_URL}/registry.json`;\nconst COMPONENTS_MANIFEST_PATH = \"components.json\";\n\nconst REGISTRY_TTL_MS = Number(\n\tprocess.env.NOCTA_CACHE_TTL_MS || 10 * 60 * 1000,\n); // 10 min\nconst ASSET_TTL_MS = Number(\n\tprocess.env.NOCTA_ASSET_CACHE_TTL_MS || 24 * 60 * 60 * 1000,\n); // 24 h\n\nlet componentsManifestPromise: Promise<Record<string, string>> | null = null;\n\nexport async function getRegistry(): Promise<Registry> {\n\t// Try network, cache on success; fallback to stale cache on failure\n\ttry {\n\t\tconst response = await fetch(REGISTRY_URL);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Failed to fetch registry: ${response.statusText}`);\n\t\t}\n\t\tconst text = await response.text();\n\t\ttry {\n\t\t\tawait writeCacheText(\"registry/registry.json\", text);\n\t\t} catch {\n\t\t\t// non-fatal\n\t\t}\n\t\treturn JSON.parse(text) as Registry;\n\t} catch (error) {\n\t\tconst cached = await readCacheText(\n\t\t\t\"registry/registry.json\",\n\t\t\tREGISTRY_TTL_MS,\n\t\t\t{ acceptStale: true },\n\t\t);\n\t\tif (cached) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(cached) as Registry;\n\t\t\t} catch {\n\t\t\t\t// fallthrough\n\t\t\t}\n\t\t}\n\t\tthrow new Error(`Failed to load registry: ${error}`);\n\t}\n}\n\nexport async function getComponent(name: string): Promise<Component> {\n\tconst registry = await getRegistry();\n\tconst component = registry.components[name];\n\n\tif (!component) {\n\t\tthrow new Error(`Component \"${name}\" not found`);\n\t}\n\n\treturn component;\n}\n\nexport async function getComponentFile(filePath: string): Promise<string> {\n\tconst fileName = filePath.split(\"/\").pop();\n\tif (!fileName) {\n\t\tthrow new Error(`Invalid component file path: ${filePath}`);\n\t}\n\n\ttry {\n\t\tconst manifest = await getComponentsManifest();\n\t\tconst encodedComponent = manifest[fileName];\n\t\tif (!encodedComponent) {\n\t\t\tthrow new Error(\n\t\t\t\t`Component file \"${fileName}\" not found in registry manifest`,\n\t\t\t);\n\t\t}\n\t\treturn Buffer.from(encodedComponent, \"base64\").toString(\"utf8\");\n\t} catch (error) {\n\t\tthrow new Error(`Failed to load component file: ${error}`);\n\t}\n}\n\nasync function getComponentsManifest(): Promise<Record<string, string>> {\n\tif (!componentsManifestPromise) {\n\t\tcomponentsManifestPromise = (async () => {\n\t\t\tconst manifestContent = await getRegistryAsset(COMPONENTS_MANIFEST_PATH);\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(manifestContent) as Record<string, string>;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(`Invalid components manifest JSON: ${error}`);\n\t\t\t}\n\t\t})();\n\t}\n\n\treturn componentsManifestPromise;\n}\n\nexport async function listComponents(): Promise<Component[]> {\n\tconst registry = await getRegistry();\n\treturn Object.values(registry.components);\n}\n\nexport async function getRegistryAsset(assetPath: string): Promise<string> {\n\tconst normalizedPath = assetPath.replace(/^\\/+/, \"\");\n\tconst url = `${REGISTRY_BASE_URL}/${normalizedPath}`;\n\tconst cacheRel = `assets/${normalizedPath}`;\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to fetch registry asset \"${assetPath}\": ${response.statusText}`,\n\t\t\t);\n\t\t}\n\t\tconst text = await response.text();\n\t\ttry {\n\t\t\tawait writeCacheText(cacheRel, text);\n\t\t} catch {\n\t\t\t// non-fatal\n\t\t}\n\t\treturn text;\n\t} catch (error) {\n\t\tconst cached = await readCacheText(cacheRel, ASSET_TTL_MS, {\n\t\t\tacceptStale: true,\n\t\t});\n\t\tif (cached) return cached;\n\t\tthrow new Error(`Failed to load registry asset \"${assetPath}\": ${error}`);\n\t}\n}\n\nexport async function getComponentsByCategory(\n\tcategory?: string,\n): Promise<Component[]> {\n\tconst registry = await getRegistry();\n\tconst components = Object.values(registry.components) as Component[];\n\n\tif (!category) {\n\t\treturn components;\n\t}\n\n\treturn components.filter((component) => component.category === category);\n}\n\nexport async function getCategories(): Promise<\n\tRecord<string, { name: string; description: string; components: string[] }>\n> {\n\tconst registry = await getRegistry();\n\treturn registry.categories;\n}\n\nexport async function getComponentWithDependencies(\n\tname: string,\n\tvisited: Set<string> = new Set(),\n): Promise<Component[]> {\n\tif (visited.has(name)) {\n\t\treturn [];\n\t}\n\n\tvisited.add(name);\n\n\tconst component = await getComponent(name);\n\tconst result = [component];\n\n\tif (\n\t\tcomponent.internalDependencies &&\n\t\tcomponent.internalDependencies.length > 0\n\t) {\n\t\tfor (const depName of component.internalDependencies) {\n\t\t\tconst depComponents = await getComponentWithDependencies(\n\t\t\t\tdepName,\n\t\t\t\tvisited,\n\t\t\t);\n\t\t\tresult.unshift(...depComponents);\n\t\t}\n\t}\n\n\tconst uniqueComponents = [];\n\tconst seenNames = new Set<string>();\n\n\tfor (const comp of result) {\n\t\tif (!seenNames.has(comp.name)) {\n\t\t\tseenNames.add(comp.name);\n\t\t\tuniqueComponents.push(comp);\n\t\t}\n\t}\n\n\treturn uniqueComponents;\n}\n","import path from \"node:path\";\nimport fs from \"fs-extra\";\n\nexport async function rollbackInitChanges(paths: string[] = []): Promise<void> {\n\tconst uniquePaths = Array.from(new Set(paths));\n\n\tfor (const targetPath of uniquePaths) {\n\t\tconst normalizedPath = path.isAbsolute(targetPath)\n\t\t\t? targetPath\n\t\t\t: path.join(process.cwd(), targetPath);\n\n\t\tif (!(await fs.pathExists(normalizedPath))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttry {\n\t\t\tawait fs.remove(normalizedPath);\n\t\t} catch {\n\t\t\t// ignore cleanup errors during rollback\n\t\t}\n\t}\n}\n","import path from \"node:path\";\nimport fs from \"fs-extra\";\n\nimport { getRegistryAsset } from \"./registry.js\";\n\nconst CSS_REGISTRY_PATH = \"css/index.css\";\n\nexport async function addDesignTokensToCss(\n\tcssFilePath: string,\n): Promise<boolean> {\n\tconst fullPath = path.join(process.cwd(), cssFilePath);\n\tconst tailwindImportPattern = /@import\\s+[\"']tailwindcss[\"'];?/i;\n\n\ttry {\n\t\tconst registryCss = await getRegistryAsset(CSS_REGISTRY_PATH);\n\t\tconst trimmedRegistryCss = registryCss.trimStart();\n\t\tlet cssContent = \"\";\n\t\tif (await fs.pathExists(fullPath)) {\n\t\t\tcssContent = await fs.readFile(fullPath, \"utf8\");\n\t\t\tconst hasRegistryTheme = cssContent.includes(\"NOCTA CSS THEME VARIABLES\");\n\t\t\tif (hasRegistryTheme) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst lines = cssContent.split(\"\\n\");\n\t\tlet lastImportIndex = -1;\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tconst line = lines[i].trim();\n\t\t\tif (line.startsWith(\"@import\")) lastImportIndex = i;\n\t\t\telse if (\n\t\t\t\tline &&\n\t\t\t\t!line.startsWith(\"@\") &&\n\t\t\t\t!line.startsWith(\"/*\") &&\n\t\t\t\t!line.startsWith(\"//\")\n\t\t\t)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst hasImport = tailwindImportPattern.test(cssContent);\n\t\tconst normalizedSnippet = hasImport\n\t\t\t? trimmedRegistryCss.replace(tailwindImportPattern, \"\").trimStart()\n\t\t\t: trimmedRegistryCss;\n\n\t\tlet newContent: string;\n\t\tif (lastImportIndex >= 0) {\n\t\t\tconst beforeImports = lines.slice(0, lastImportIndex + 1);\n\t\t\tconst afterImports = lines.slice(lastImportIndex + 1);\n\t\t\tnewContent = [\n\t\t\t\t...beforeImports,\n\t\t\t\t\"\",\n\t\t\t\tnormalizedSnippet,\n\t\t\t\t\"\",\n\t\t\t\t...afterImports,\n\t\t\t].join(\"\\n\");\n\t\t} else {\n\t\t\tnewContent = `${normalizedSnippet}\\n\\n${cssContent}`;\n\t\t}\n\n\t\tawait fs.ensureDir(path.dirname(fullPath));\n\t\tawait fs.writeFile(fullPath, newContent, \"utf8\");\n\t\treturn true;\n\t} catch (error) {\n\t\tthrow new Error(`Failed to add design tokens to CSS file: ${error}`);\n\t}\n}\n\nexport async function checkTailwindInstallation(): Promise<{\n\tinstalled: boolean;\n\tversion?: string;\n}> {\n\ttry {\n\t\tconst packageJson = await fs.readJson(\"package.json\");\n\t\tconst declared =\n\t\t\tpackageJson.dependencies?.tailwindcss ||\n\t\t\tpackageJson.devDependencies?.tailwindcss;\n\n\t\tif (!declared) {\n\t\t\treturn { installed: false };\n\t\t}\n\n\t\tconst pkgPath = path.join(\n\t\t\tprocess.cwd(),\n\t\t\t\"node_modules\",\n\t\t\t\"tailwindcss\",\n\t\t\t\"package.json\",\n\t\t);\n\n\t\tif (await fs.pathExists(pkgPath)) {\n\t\t\ttry {\n\t\t\t\tconst tailwindPkg = await fs.readJson(pkgPath);\n\t\t\t\tconst actualVersion = tailwindPkg?.version as string | undefined;\n\t\t\t\tif (actualVersion) {\n\t\t\t\t\treturn { installed: true, version: actualVersion };\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// fall through to declared\n\t\t\t}\n\t\t\t// Installed but version unknown; surface declared\n\t\t\treturn { installed: true, version: declared };\n\t\t}\n\n\t\treturn { installed: false };\n\t} catch {\n\t\treturn { installed: false };\n\t}\n}\n","import chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport semver from \"semver\";\nimport type { ComponentFile, ComponentFileWithContent } from \"../types.js\";\nimport {\n\tdetectFramework,\n\tfileExists,\n\tgetComponentFile,\n\tgetComponentWithDependencies,\n\tgetInstalledDependencies,\n\tinstallDependencies,\n\treadConfig,\n\tresolveComponentPath,\n\twriteComponentFile,\n} from \"../utils/index.js\";\n\nfunction joinImportPath(prefix: string, importPath: string): string {\n\tconst normalizedPrefix = prefix.replace(/\\/+$/, \"\");\n\tconst normalizedPath = importPath.replace(/^\\/+/, \"\");\n\tif (!normalizedPath) {\n\t\treturn normalizedPrefix;\n\t}\n\treturn `${normalizedPrefix}/${normalizedPath}`;\n}\n\nfunction normalizeComponentContent(\n\tcontent: string,\n\taliasPrefix: string,\n): string {\n\tconst sanitizedPrefix = aliasPrefix || \"@\";\n\treturn content.replace(\n\t\t/(['\"])@\\/([^'\"\\n]+)(['\"])/g,\n\t\t(_match, openQuote: string, importPath: string, closeQuote: string) => {\n\t\t\tlet normalizedPath = importPath;\n\t\t\tif (normalizedPath.startsWith(\"app/\")) {\n\t\t\t\tnormalizedPath = normalizedPath.slice(4);\n\t\t\t} else if (normalizedPath.startsWith(\"src/\")) {\n\t\t\t\tnormalizedPath = normalizedPath.slice(4);\n\t\t\t}\n\t\t\tif (normalizedPath.startsWith(\"./\")) {\n\t\t\t\tnormalizedPath = normalizedPath.slice(2);\n\t\t\t}\n\n\t\t\treturn `${openQuote}${joinImportPath(\n\t\t\t\tsanitizedPrefix,\n\t\t\t\tnormalizedPath,\n\t\t\t)}${closeQuote}`;\n\t\t},\n\t);\n}\n\nexport async function add(\n    componentNames: string[],\n    options: { dryRun?: boolean } = {},\n): Promise<void> {\n    const isDryRun = Boolean(options?.dryRun);\n    if (componentNames.length === 0) {\n        console.log(chalk.red(\"Please specify at least one component name\"));\n        console.log(\n            chalk.yellow(\n                \"Usage: npx nocta-ui add <component1> [component2] [component3] ...\",\n            ),\n        );\n        return;\n    }\n\n    const spinner = ora(\n        `${isDryRun ? \"[dry-run] \" : \"\"}Adding ${\n            componentNames.length > 1\n                ? `${componentNames.length} components`\n                : componentNames[0]\n        }...`,\n    ).start();\n\n\ttry {\n\t\tconst config = await readConfig();\n\t\tif (!config) {\n\t\t\tspinner.fail(\"Project not initialized\");\n\t\t\tconsole.log(chalk.red(\"nocta.config.json not found\"));\n\t\t\tconsole.log(chalk.yellow('Run \"npx nocta-ui init\" first'));\n\t\t\treturn;\n\t\t}\n\n\t\tspinner.text = \"Detecting framework...\";\n\t\tconst frameworkDetection = await detectFramework();\n\t\tconst componentAliasPrefix =\n\t\t\tconfig.aliasPrefixes?.components !== undefined\n\t\t\t\t? config.aliasPrefixes.components\n\t\t\t\t: frameworkDetection.framework === \"react-router\"\n\t\t\t\t\t? \"~\"\n\t\t\t\t\t: \"@\";\n\n\t\tspinner.text = \"Fetching components and dependencies...\";\n\t\tconst allComponentsMap = new Map();\n\t\tconst processedComponents = new Set<string>();\n\n\t\tfor (const componentName of componentNames) {\n\t\t\ttry {\n\t\t\t\tconst componentsWithDeps =\n\t\t\t\t\tawait getComponentWithDependencies(componentName);\n\n\t\t\t\tfor (const component of componentsWithDeps) {\n\t\t\t\t\tif (!processedComponents.has(component.name)) {\n\t\t\t\t\t\tallComponentsMap.set(component.name, component);\n\t\t\t\t\t\tprocessedComponents.add(component.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tspinner.fail(`Failed to fetch component: ${componentName}`);\n\t\t\t\tif (error instanceof Error && error.message.includes(\"not found\")) {\n\t\t\t\t\tconsole.log(chalk.red(`Component \"${componentName}\" not found`));\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\tchalk.yellow('Run \"npx nocta-ui list\" to see available components'),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tconst allComponents = Array.from(allComponentsMap.values());\n\t\tconst requestedComponents = componentNames\n\t\t\t.map((name) => {\n\t\t\t\treturn allComponents.find((c) => {\n\t\t\t\t\tconst registryKey =\n\t\t\t\t\t\tc.files[0].path.split(\"/\").pop()?.replace(\".tsx\", \"\") || \"\";\n\t\t\t\t\treturn (\n\t\t\t\t\t\tregistryKey.toLowerCase() === name.toLowerCase() ||\n\t\t\t\t\t\tc.name.toLowerCase() === name.toLowerCase()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.filter(\n\t\t\t\t(component): component is NonNullable<typeof component> =>\n\t\t\t\t\tcomponent !== undefined,\n\t\t\t);\n\n\t\tconst requestedComponentNames = requestedComponents.map((c) => c!.name);\n\t\tconst dependencies = allComponents.filter(\n\t\t\t(c) => !requestedComponentNames.includes(c.name),\n\t\t);\n\n\t\tspinner.stop();\n\t\tconsole.log(\n\t\t\tchalk.blue(\n\t\t\t\t`Installing ${componentNames.length} component${componentNames.length > 1 ? \"s\" : \"\"}:`,\n\t\t\t),\n\t\t);\n\n\t\trequestedComponents.forEach((component) => {\n\t\t\tconsole.log(chalk.green(`   • ${component!.name} (requested)`));\n\t\t});\n\t\tif (dependencies.length > 0) {\n\t\t\tconsole.log(chalk.blue(\"\\nWith internal dependencies:\"));\n\t\t\tdependencies.forEach((component) => {\n\t\t\t\tconsole.log(chalk.gray(`   • ${component.name}`));\n\t\t\t});\n\t\t}\n\n\t\tconsole.log(\"\");\n\t\tspinner.start(`Preparing components...`);\n\n\t\tconst allComponentFiles: ComponentFileWithContent[] = [];\n\t\tfor (const component of allComponents) {\n\t\t\tconst files = await Promise.all(\n\t\t\t\tcomponent.files.map(async (file: ComponentFile) => {\n\t\t\t\t\tconst content = await getComponentFile(file.path);\n\t\t\t\t\tconst normalizedContent = normalizeComponentContent(\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tcomponentAliasPrefix,\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...file,\n\t\t\t\t\t\tcontent: normalizedContent,\n\t\t\t\t\t\tcomponentName: component.name,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\t\t\tallComponentFiles.push(...files);\n\t\t}\n\n\t\tspinner.text = `Checking existing files...`;\n\n\t\tconst existingFiles = [];\n\t\tfor (const file of allComponentFiles) {\n\t\t\tconst targetPath = resolveComponentPath(file.path, config);\n\t\t\tif (await fileExists(targetPath)) {\n\t\t\t\texistingFiles.push({ file, targetPath });\n\t\t\t}\n\t\t}\n\n        if (existingFiles.length > 0) {\n            spinner.stop();\n            console.log(chalk.yellow(`\\nThe following files already exist:`));\n            existingFiles.forEach(({ targetPath }) => {\n                console.log(chalk.gray(`   ${targetPath}`));\n            });\n\n            if (isDryRun) {\n                console.log(chalk.blue(\"\\n[dry-run] Would overwrite the files above\"));\n                spinner.start(`[dry-run] Preparing file writes...`);\n            } else {\n                const { shouldOverwrite } = await inquirer.prompt([\n                    {\n                        type: \"confirm\",\n                        name: \"shouldOverwrite\",\n                        message: \"Do you want to overwrite these files?\",\n                        default: false,\n                    },\n                ]);\n\n                if (!shouldOverwrite) {\n                    console.log(chalk.red(\"Installation cancelled\"));\n                    return;\n                }\n\n                spinner.start(`Installing component files...`);\n            }\n        } else {\n            spinner.text = isDryRun\n                ? `[dry-run] Preparing file writes...`\n                : `Installing component files...`;\n        }\n\n        for (const file of allComponentFiles) {\n            const targetPath = resolveComponentPath(file.path, config);\n            if (isDryRun) {\n                // no-op, just preview\n            } else {\n                await writeComponentFile(targetPath, file.content);\n            }\n        }\n\n\t\tconst allDeps: Record<string, string> = {};\n\t\tfor (const component of allComponents) {\n\t\t\tObject.assign(allDeps, component.dependencies);\n\t\t}\n\n\t\tconst deps = Object.keys(allDeps);\n\t\tif (deps.length > 0) {\n\t\t\tspinner.text = `Checking dependencies...`;\n\n\t\t\ttry {\n\t\t\t\tconst installedDeps = await getInstalledDependencies();\n\n\t\t\t\tconst depsToInstall: Record<string, string> = {};\n\t\t\t\tconst skippedDeps: string[] = [];\n\t\t\t\tconst incompatibleDeps: string[] = [];\n\n\t\t\t\tfor (const [depName, requiredVersion] of Object.entries(allDeps)) {\n\t\t\t\t\tconst installedVersion = installedDeps[depName];\n\n\t\t\t\t\tif (installedVersion) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst cleanInstalledVersion = installedVersion.replace(/^v/, \"\");\n\t\t\t\t\t\t\tconst cleanRequiredVersion = requiredVersion.replace(\n\t\t\t\t\t\t\t\t/^[v^~]/,\n\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (depName === \"react\" || depName === \"react-dom\") {\n\t\t\t\t\t\t\t\tconst installedMajor = semver.major(cleanInstalledVersion);\n\t\t\t\t\t\t\t\tconst requiredMajor = semver.major(cleanRequiredVersion);\n\n\t\t\t\t\t\t\t\tif (installedMajor >= requiredMajor) {\n\t\t\t\t\t\t\t\t\tskippedDeps.push(\n\t\t\t\t\t\t\t\t\t\t`${depName}@${installedVersion} (newer version compatible with ${requiredVersion})`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst satisfies = semver.satisfies(\n\t\t\t\t\t\t\t\tcleanInstalledVersion,\n\t\t\t\t\t\t\t\trequiredVersion,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (satisfies) {\n\t\t\t\t\t\t\t\tskippedDeps.push(\n\t\t\t\t\t\t\t\t\t`${depName}@${installedVersion} (satisfies ${requiredVersion})`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst installedMajor = semver.major(cleanInstalledVersion);\n\t\t\t\t\t\t\t\tconst requiredMajor = semver.major(cleanRequiredVersion);\n\n\t\t\t\t\t\t\t\tif (installedMajor > requiredMajor) {\n\t\t\t\t\t\t\t\t\tskippedDeps.push(\n\t\t\t\t\t\t\t\t\t\t`${depName}@${installedVersion} (newer major version, assuming compatibility)`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tincompatibleDeps.push(\n\t\t\t\t\t\t\t\t\t\t`${depName}: installed ${installedVersion}, required ${requiredVersion}`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tdepsToInstall[depName] = requiredVersion;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (semverError) {\n\t\t\t\t\t\t\tconst errorMessage =\n\t\t\t\t\t\t\t\tsemverError instanceof Error\n\t\t\t\t\t\t\t\t\t? semverError.message\n\t\t\t\t\t\t\t\t\t: \"Unknown error\";\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\tchalk.yellow(\n\t\t\t\t\t\t\t\t\t`[WARN] Could not compare versions for ${depName}: ${errorMessage}`,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdepsToInstall[depName] = requiredVersion;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdepsToInstall[depName] = requiredVersion;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                if (Object.keys(depsToInstall).length > 0) {\n                    spinner.text = isDryRun\n                        ? `[dry-run] Checking missing dependencies...`\n                        : `Installing missing dependencies...`;\n                    if (!isDryRun) {\n                        await installDependencies(depsToInstall);\n                    }\n                }\n\n\t\t\t\tif (skippedDeps.length > 0) {\n\t\t\t\t\tconsole.log(chalk.green(\"\\nDependencies already satisfied:\"));\n\t\t\t\t\tskippedDeps.forEach((dep) => {\n\t\t\t\t\t\tconsole.log(chalk.gray(`   ${dep}`));\n\t\t\t\t\t});\n\t\t\t\t}\n\n                if (incompatibleDeps.length > 0) {\n                    console.log(\n                        chalk.yellow(\n                            `\\n${isDryRun ? \"[dry-run] Would update incompatible dependencies:\" : \"Incompatible dependencies updated:\"}`,\n                        ),\n                    );\n                    incompatibleDeps.forEach((dep) => {\n                        console.log(chalk.gray(`   ${dep}`));\n                    });\n                }\n\n                if (Object.keys(depsToInstall).length > 0) {\n                    console.log(\n                        chalk.blue(\n                            `\\n${isDryRun ? \"[dry-run] Would install dependencies:\" : \"Dependencies installed:\"}`,\n                        ),\n                    );\n                    Object.entries(depsToInstall).forEach(([dep, version]) => {\n                        console.log(chalk.gray(`   ${dep}@${version}`));\n                    });\n                }\n\t\t\t} catch (error) {\n\t\t\t\tconst errorMessage =\n\t\t\t\t\terror instanceof Error ? error.message : \"Unknown error\";\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.yellow(\n\t\t\t\t\t\t`[WARN] Could not check existing dependencies: ${errorMessage}`,\n\t\t\t\t\t),\n\t\t\t\t);\n                console.log(\n                    chalk.yellow(\n                        `${isDryRun ? \"[dry-run] Would install all dependencies...\" : \"Installing all dependencies...\"}`,\n                    ),\n                );\n                spinner.text = isDryRun\n                    ? `[dry-run] Checking dependencies...`\n                    : `Installing dependencies...`;\n                if (!isDryRun) {\n                    await installDependencies(allDeps);\n                }\n\n                console.log(\n                    chalk.blue(\n                        `\\n${isDryRun ? \"[dry-run] Would install dependencies:\" : \"Dependencies installed:\"}`,\n                    ),\n                );\n                Object.entries(allDeps).forEach(([dep, version]) => {\n                    console.log(chalk.gray(`   ${dep}@${version}`));\n                });\n            }\n        }\n\n        const componentText =\n            componentNames.length > 1\n                ? `${componentNames.length} components`\n                : componentNames[0];\n        spinner.succeed(\n            `${isDryRun ? \"[dry-run] \" : \"\"}${componentText} ${\n                isDryRun ? \"would be added\" : \"added successfully!\"\n            }`,\n        );\n\n\t\tconsole.log(chalk.green(\"\\nComponents installed:\"));\n\t\tallComponentFiles.forEach((file) => {\n\t\t\tconst targetPath = resolveComponentPath(file.path, config);\n\t\t\tconsole.log(chalk.gray(`   ${targetPath} (${file.componentName})`));\n\t\t});\n\n        console.log(chalk.blue(`\\n${isDryRun ? \"[dry-run] Example imports:\" : \"Import and use:\"}`));\n\t\tconst normalizeAliasPath = (aliasPath: string): string => {\n\t\t\treturn aliasPath\n\t\t\t\t.replace(/^\\.\\/?/, \"\")\n\t\t\t\t.replace(/^\\/+/, \"\")\n\t\t\t\t.replace(/^src\\//, \"\")\n\t\t\t\t.replace(/^app\\//, \"\");\n\t\t};\n\n\t\tfor (const componentName of componentNames) {\n\t\t\tconst component = allComponents.find((c) => {\n\t\t\t\tconst registryKey =\n\t\t\t\t\tc.files[0].path.split(\"/\").pop()?.replace(\".tsx\", \"\") || \"\";\n\t\t\t\treturn (\n\t\t\t\t\tregistryKey.toLowerCase() === componentName.toLowerCase() ||\n\t\t\t\t\tc.name.toLowerCase() === componentName.toLowerCase()\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (component) {\n\t\t\t\tconst firstFile = component.files[0];\n\t\t\t\tconst componentPath = firstFile.path\n\t\t\t\t\t.replace(\"components/\", \"\")\n\t\t\t\t\t.replace(\".tsx\", \"\");\n\t\t\t\tconst basePath = normalizeAliasPath(config.aliases.components);\n\t\t\t\tconst aliasBase = basePath\n\t\t\t\t\t? joinImportPath(componentAliasPrefix, basePath)\n\t\t\t\t\t: componentAliasPrefix;\n\t\t\t\tconst importPath = joinImportPath(aliasBase, componentPath);\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.gray(\n\t\t\t\t\t\t`   import { ${component.exports.join(\", \")} } from \"${importPath}\"; // ${component.name}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst componentsWithVariants = requestedComponents.filter(\n\t\t\t(c) => c!.variants && c!.variants.length > 0,\n\t\t);\n\t\tif (componentsWithVariants.length > 0) {\n\t\t\tconsole.log(chalk.blue(\"\\nAvailable variants:\"));\n\t\t\tcomponentsWithVariants.forEach((component) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.gray(\n\t\t\t\t\t\t`   ${component!.name}: ${component!.variants!.join(\", \")}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tconst componentsWithSizes = requestedComponents.filter(\n\t\t\t(c) => c!.sizes && c!.sizes.length > 0,\n\t\t);\n\t\tif (componentsWithSizes.length > 0) {\n\t\t\tconsole.log(chalk.blue(\"\\nAvailable sizes:\"));\n\t\t\tcomponentsWithSizes.forEach((component) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.gray(`   ${component!.name}: ${component!.sizes!.join(\", \")}`),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tconst componentText =\n\t\t\tcomponentNames.length > 1\n\t\t\t\t? `components: ${componentNames.join(\", \")}`\n\t\t\t\t: componentNames[0];\n\t\tspinner.fail(`Failed to add ${componentText}`);\n\n\t\tif (error instanceof Error) {\n\t\t\tconsole.log(chalk.red(`${error.message}`));\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n","import chalk from \"chalk\";\nimport ora from \"ora\";\nimport fs from \"fs-extra\";\nimport type { Config } from \"../types.js\";\nimport {\n\taddDesignTokensToCss,\n\tcheckProjectRequirements,\n\tcheckTailwindInstallation,\n\tdetectFramework,\n\tfileExists,\n\tgetRegistry,\n\tgetRegistryAsset,\n\tinstallDependencies,\n\treadConfig,\n\tresolveComponentPath,\n\trollbackInitChanges,\n\twriteComponentFile,\n\twriteConfig,\n} from \"../utils/index.js\";\n\nexport async function init(options: { dryRun?: boolean } = {}): Promise<void> {\n    const isDryRun = Boolean(options?.dryRun);\n    const spinner = ora(`${isDryRun ? \"[dry-run] \" : \"\"}Initializing nocta-ui...`).start();\n    const createdFiles: string[] = [];\n\n\ttry {\n        const existingConfig = await readConfig();\n        if (existingConfig) {\n            spinner.stop();\n            console.log(chalk.yellow(\"nocta.config.json already exists!\"));\n            console.log(chalk.gray(\"Your project is already initialized.\"));\n            return;\n        }\n\n\t\tspinner.text = \"Checking Tailwind CSS installation...\";\n\t\tconst tailwindCheck = await checkTailwindInstallation();\n\n\t\tif (!tailwindCheck.installed) {\n\t\t\tspinner.fail(\"Tailwind CSS is required but not found!\");\n\t\t\tconsole.log(\n\t\t\t\tchalk.red(\n\t\t\t\t\t\"\\nTailwind CSS is not installed or not found in node_modules\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tconsole.log(chalk.yellow(\"Please install Tailwind CSS first:\"));\n\t\t\tconsole.log(chalk.gray(\"   npm install -D tailwindcss\"));\n\t\t\tconsole.log(chalk.gray(\"   # or\"));\n\t\t\tconsole.log(chalk.gray(\"   yarn add -D tailwindcss\"));\n\t\t\tconsole.log(chalk.gray(\"   # or\"));\n\t\t\tconsole.log(chalk.gray(\"   pnpm add -D tailwindcss\"));\n\t\t\tconsole.log(\n\t\t\t\tchalk.blue(\n\t\t\t\t\t\"\\nVisit https://tailwindcss.com/docs/installation for setup guide\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tspinner.text = `Found Tailwind CSS ${tailwindCheck.version} ✓`;\n\n\t\tspinner.text = \"Detecting project framework...\";\n\t\tconst frameworkDetection = await detectFramework();\n\n\t\tif (frameworkDetection.framework === \"unknown\") {\n\t\t\tspinner.fail(\"Unsupported project structure detected!\");\n\t\t\tconsole.log(chalk.red(\"\\nCould not detect a supported React framework\"));\n\t\t\tconsole.log(chalk.yellow(\"nocta-ui supports:\"));\n\t\t\tconsole.log(chalk.gray(\"   • Next.js (App Router or Pages Router)\"));\n\t\t\tconsole.log(chalk.gray(\"   • Vite + React\"));\n\t\t\tconsole.log(chalk.gray(\"   • React Router 7 (Framework Mode)\"));\n\t\t\tconsole.log(chalk.blue(\"\\nDetection details:\"));\n\t\t\tconsole.log(\n\t\t\t\tchalk.gray(\n\t\t\t\t\t`   React dependency: ${frameworkDetection.details.hasReactDependency ? \"✓\" : \"✗\"}`,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\tchalk.gray(\n\t\t\t\t\t`   Framework config: ${frameworkDetection.details.hasConfig ? \"✓\" : \"✗\"}`,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\tchalk.gray(\n\t\t\t\t\t`   Config files found: ${frameworkDetection.details.configFiles.join(\", \") || \"none\"}`,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!frameworkDetection.details.hasReactDependency) {\n\t\t\t\tconsole.log(chalk.yellow(\"\\nInstall React first:\"));\n\t\t\t\tconsole.log(chalk.gray(\"   npm install react react-dom\"));\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.gray(\"   npm install -D @types/react @types/react-dom\"),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.log(chalk.yellow(\"\\nSet up a supported framework:\"));\n\t\t\t\tconsole.log(chalk.blue(\"   Next.js:\"));\n\t\t\t\tconsole.log(chalk.gray(\"     npx create-next-app@latest\"));\n\t\t\t\tconsole.log(chalk.blue(\"   Vite + React:\"));\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.gray(\"     npm create vite@latest . -- --template react-ts\"),\n\t\t\t\t);\n\t\t\t\tconsole.log(chalk.blue(\"   React Router 7:\"));\n\t\t\t\tconsole.log(chalk.gray(\"     npx create-react-router@latest\"));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet frameworkInfo = \"\";\n\t\tif (frameworkDetection.framework === \"nextjs\") {\n\t\t\tconst routerType = frameworkDetection.details.appStructure;\n\t\t\tframeworkInfo = `Next.js ${frameworkDetection.version || \"\"} (${routerType === \"app-router\" ? \"App Router\" : routerType === \"pages-router\" ? \"Pages Router\" : \"Unknown Router\"})`;\n\t\t} else if (frameworkDetection.framework === \"vite-react\") {\n\t\t\tframeworkInfo = `Vite ${frameworkDetection.version || \"\"} + React`;\n\t\t} else if (frameworkDetection.framework === \"react-router\") {\n\t\t\tframeworkInfo = `React Router ${frameworkDetection.version || \"\"} (Framework Mode)`;\n\t\t}\n\n\t\tspinner.text = `Found ${frameworkInfo} ✓`;\n\n\t\tspinner.text = \"Validating project requirements...\";\n\t\tconst { requirements } = await getRegistry();\n\t\tconst requirementIssues = await checkProjectRequirements(requirements);\n\t\tif (requirementIssues.length > 0) {\n\t\t\tspinner.fail(\"Project requirements not satisfied!\");\n\t\t\tconsole.log(chalk.red(\"\\nPlease update the following dependencies:\"));\n\t\t\tfor (const issue of requirementIssues) {\n\t\t\t\tconsole.log(\n\t\t\t\t\tchalk.yellow(`   ${issue.name}: requires ${issue.required}`),\n\t\t\t\t);\n\t\t\t\tconst detailLines: string[] = [];\n\t\t\t\tdetailLines.push(\n\t\t\t\t\tissue.installed\n\t\t\t\t\t\t? chalk.gray(`installed: ${issue.installed}`)\n\t\t\t\t\t\t: chalk.gray(\"installed: not found\"),\n\t\t\t\t);\n\t\t\t\tif (issue.declared) {\n\t\t\t\t\tdetailLines.push(chalk.gray(`declared: ${issue.declared}`));\n\t\t\t\t}\n\t\t\t\tif (issue.reason === \"outdated\") {\n\t\t\t\t\tdetailLines.push(chalk.gray(\"update to a compatible version\"));\n\t\t\t\t} else if (issue.reason === \"unknown\") {\n\t\t\t\t\tdetailLines.push(chalk.gray(\"unable to determine installed version\"));\n\t\t\t\t}\n\t\t\t\tfor (const line of detailLines) {\n\t\t\t\t\tconsole.log(`      ${line}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst versionStr = tailwindCheck.version || \"\";\n\t\tconst majorMatch = versionStr.match(/[\\^~]?(\\d+)(?:\\.|\\b)/);\n\t\tconst major = majorMatch\n\t\t\t? parseInt(majorMatch[1], 10)\n\t\t\t: /latest/i.test(versionStr)\n\t\t\t\t? 4\n\t\t\t\t: 0;\n\t\tconst isTailwindV4 = major >= 4;\n\t\tif (!isTailwindV4) {\n\t\t\tspinner.fail(\"Tailwind CSS v4 is required\");\n\t\t\tconsole.log(\n\t\t\t\tchalk.red(\n\t\t\t\t\t\"\\nDetected Tailwind version that is not v4: \" +\n\t\t\t\t\t\t(tailwindCheck.version || \"unknown\"),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconsole.log(chalk.yellow(\"Please upgrade to Tailwind CSS v4:\"));\n\t\t\tconsole.log(chalk.gray(\"   npm install -D tailwindcss@latest\"));\n\t\t\tconsole.log(chalk.gray(\"   # or\"));\n\t\t\tconsole.log(chalk.gray(\"   yarn add -D tailwindcss@latest\"));\n\t\t\tconsole.log(chalk.gray(\"   # or\"));\n\t\t\tconsole.log(chalk.gray(\"   pnpm add -D tailwindcss@latest\"));\n\t\t\treturn;\n\t\t}\n\n        spinner.stop();\n        spinner.start(`${isDryRun ? \"[dry-run] \" : \"\"}Creating configuration...`);\n\n\t\tlet config: Config;\n\t\tconst aliasPrefix =\n\t\t\tframeworkDetection.framework === \"react-router\" ? \"~\" : \"@\";\n\n\t\tif (frameworkDetection.framework === \"nextjs\") {\n\t\t\tconst isAppRouter =\n\t\t\t\tframeworkDetection.details.appStructure === \"app-router\";\n\t\t\tconfig = {\n\t\t\t\tstyle: \"default\",\n\t\t\t\ttailwind: {\n\t\t\t\t\tcss: isAppRouter ? \"app/globals.css\" : \"styles/globals.css\",\n\t\t\t\t},\n\t\t\t\taliases: {\n\t\t\t\t\tcomponents: \"components/ui\",\n\t\t\t\t\tutils: \"lib/utils\",\n\t\t\t\t},\n\t\t\t};\n\t\t} else if (frameworkDetection.framework === \"vite-react\") {\n\t\t\tconfig = {\n\t\t\t\tstyle: \"default\",\n\t\t\t\ttailwind: {\n\t\t\t\t\tcss: \"src/App.css\",\n\t\t\t\t},\n\t\t\t\taliases: {\n\t\t\t\t\tcomponents: \"src/components/ui\",\n\t\t\t\t\tutils: \"src/lib/utils\",\n\t\t\t\t},\n\t\t\t};\n\t\t} else if (frameworkDetection.framework === \"react-router\") {\n\t\t\tconfig = {\n\t\t\t\tstyle: \"default\",\n\t\t\t\ttailwind: {\n\t\t\t\t\tcss: \"app/app.css\",\n\t\t\t\t},\n\t\t\t\taliases: {\n\t\t\t\t\tcomponents: \"app/components/ui\",\n\t\t\t\t\tutils: \"app/lib/utils\",\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new Error(\"Unsupported framework configuration\");\n\t\t}\n\n\t\tconfig.aliasPrefixes = {\n\t\t\tcomponents: aliasPrefix,\n\t\t\tutils: aliasPrefix,\n\t\t};\n\n        if (isDryRun) {\n            console.log(chalk.blue(\"\\n[dry-run] Would create configuration:\"));\n            console.log(chalk.gray(\"   nocta.config.json\"));\n        } else {\n            await writeConfig(config);\n            createdFiles.push(\"nocta.config.json\");\n        }\n\n        spinner.text = isDryRun\n            ? \"[dry-run] Checking required dependencies...\"\n            : \"Installing required dependencies...\";\n\t\tconst requiredDependencies = {\n\t\t\tclsx: \"^2.1.1\",\n\t\t\t\"tailwind-merge\": \"^3.3.1\",\n\t\t\t\"class-variance-authority\": \"^0.7.1\",\n\t\t\t\"@ariakit/react\": \"^0.4.18\",\n\t\t\t\"@radix-ui/react-icons\": \"^1.3.2\",\n\t\t};\n\n        try {\n            if (isDryRun) {\n                console.log(chalk.blue(\"\\n[dry-run] Would install dependencies:\"));\n                Object.entries(requiredDependencies).forEach(([dep, ver]) =>\n                    console.log(chalk.gray(`   ${dep}@${ver}`)),\n                );\n            } else {\n                await installDependencies(requiredDependencies);\n            }\n        } catch (error) {\n            spinner.warn(\n                \"Dependencies installation failed, but you can install them manually\",\n            );\n            console.log(chalk.yellow(\"Run: npm install clsx tailwind-merge\"));\n        }\n\n\t\tspinner.text = \"Creating utility functions...\";\n\t\tconst utilsPath = `${config.aliases.utils}.ts`;\n\t\tconst utilsExists = await fileExists(utilsPath);\n\t\tlet utilsCreated = false;\n\n        if (utilsExists) {\n            spinner.stop();\n            console.log(\n                chalk.yellow(`${utilsPath} already exists - skipping creation`),\n            );\n            spinner.start();\n        } else {\n            if (isDryRun) {\n                console.log(chalk.blue(\"\\n[dry-run] Would create utility functions:\"));\n                console.log(chalk.gray(`   ${utilsPath}`));\n                utilsCreated = true;\n            } else {\n                const utilsContent = await getRegistryAsset(\"lib/utils.ts\");\n                await writeComponentFile(utilsPath, utilsContent);\n                createdFiles.push(utilsPath);\n                utilsCreated = true;\n            }\n        }\n\n\t\tspinner.text = \"Creating base icons component...\";\n\t\tconst iconsPath = resolveComponentPath(\"components/icons.ts\", config);\n\t\tconst iconsExist = await fileExists(iconsPath);\n\t\tlet iconsCreated = false;\n\n        if (iconsExist) {\n            spinner.stop();\n            console.log(\n                chalk.yellow(`${iconsPath} already exists - skipping creation`),\n            );\n            spinner.start();\n        } else {\n            if (isDryRun) {\n                console.log(chalk.blue(\"\\n[dry-run] Would create icons component:\"));\n                console.log(chalk.gray(`   ${iconsPath}`));\n                iconsCreated = true;\n            } else {\n                const iconsContent = await getRegistryAsset(\"icons/icons.ts\");\n                await writeComponentFile(iconsPath, iconsContent);\n                createdFiles.push(iconsPath);\n                iconsCreated = true;\n            }\n        }\n\n\t\tspinner.text = \"Adding semantic color variables...\";\n\t\tlet tokensAdded = false;\n\t\tlet tokensLocation = \"\";\n\n        try {\n            const cssPath = config.tailwind.css;\n            if (isDryRun) {\n                // Best-effort detection if tokens are already present without fetching registry assets\n                const fullCss = fs.existsSync(cssPath)\n                    ? await fs.readFile(cssPath, \"utf8\")\n                    : \"\";\n                const hasTokens = fullCss.includes(\"NOCTA CSS THEME VARIABLES\");\n                if (!hasTokens) {\n                    tokensAdded = true;\n                    tokensLocation = cssPath;\n                }\n            } else {\n                const added = await addDesignTokensToCss(cssPath);\n                if (added) {\n                    tokensAdded = true;\n                    tokensLocation = cssPath;\n                }\n            }\n        } catch (error) {\n            spinner.warn(\n                \"Design tokens installation failed, but you can add them manually\",\n            );\n            console.log(\n                chalk.yellow(\"See documentation for manual token installation\"),\n            );\n        }\n\n        spinner.succeed(\n            `${isDryRun ? \"[dry-run] \" : \"\"}nocta-ui ${\n                isDryRun ? \"would be initialized\" : \"initialized successfully!\"\n            }`,\n        );\n\n\t\tconsole.log(chalk.green(\"\\nConfiguration created:\"));\n\t\tconsole.log(chalk.gray(`   nocta.config.json (${frameworkInfo})`));\n\n        console.log(\n            chalk.blue(\n                `\\n${isDryRun ? \"[dry-run] Would install dependencies:\" : \"Dependencies installed:\"}`,\n            ),\n        );\n        console.log(chalk.gray(`   clsx@${requiredDependencies.clsx}`));\n        console.log(\n            chalk.gray(`   tailwind-merge@${requiredDependencies[\"tailwind-merge\"]}`),\n        );\n        console.log(\n            chalk.gray(\n                `   class-variance-authority@${requiredDependencies[\"class-variance-authority\"]}`,\n            ),\n        );\n\n\t\tif (utilsCreated) {\n\t\t\tconsole.log(chalk.green(\"\\nUtility functions created:\"));\n\t\t\tconsole.log(chalk.gray(`   ${utilsPath}`));\n\t\t\tconsole.log(chalk.gray(`   • cn() function for className merging`));\n\t\t}\n\n\t\tif (iconsCreated) {\n\t\t\tconsole.log(chalk.green(\"\\nIcons component created:\"));\n\t\t\tconsole.log(chalk.gray(`   ${iconsPath}`));\n\t\t\tconsole.log(chalk.gray(\"   • Base Radix Icons mapping\"));\n\t\t}\n\n        if (tokensAdded) {\n            console.log(\n                chalk.green(\n                    `\\n${isDryRun ? \"[dry-run] Would add color variables:\" : \"Color variables added:\"}`,\n                ),\n            );\n            console.log(chalk.gray(`   ${tokensLocation}`));\n            console.log(\n                chalk.gray(\n                    `   • Semantic tokens (background, foreground, primary, border, etc.)`,\n                ),\n            );\n        } else if (!tokensAdded && tokensLocation === \"\") {\n            console.log(\n                chalk.yellow(\n                    `\\n${isDryRun ? \"[dry-run] Design tokens skipped (likely already present)\" : \"Design tokens skipped (already exist or error occurred)\"}`,\n                ),\n            );\n        }\n\n\t\tif (isTailwindV4) {\n\t\t\tconsole.log(chalk.blue(\"\\nTailwind v4 detected!\"));\n\t\t\tconsole.log(\n\t\t\t\tchalk.gray(\n\t\t\t\t\t'   Make sure your CSS file includes @import \"tailwindcss\";',\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n        console.log(\n            chalk.blue(\n                `\\n${isDryRun ? \"[dry-run] You could then add components:\" : \"You can now add components:\"}`,\n            ),\n        );\n        console.log(chalk.gray(\"   npx nocta-ui add button\"));\n\t} catch (error) {\n\t\tspinner.fail(\"Failed to initialize nocta-ui\");\n\n\t\ttry {\n\t\t\tawait rollbackInitChanges(createdFiles);\n\t\t\tconsole.log(chalk.yellow(\"Rolled back partial changes\"));\n\t\t} catch (rollbackError) {\n\t\t\tconsole.log(\n\t\t\t\tchalk.red(\"Could not rollback some changes - please check manually\"),\n\t\t\t);\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n","import chalk from \"chalk\";\nimport ora from \"ora\";\nimport { getCategories, listComponents } from \"../utils/index.js\";\n\nexport async function list(): Promise<void> {\n\tconst spinner = ora(\"Fetching components...\").start();\n\n\ttry {\n\t\tconst [components, categories] = await Promise.all([\n\t\t\tlistComponents(),\n\t\t\tgetCategories(),\n\t\t]);\n\n\t\tspinner.stop();\n\n\t\tconsole.log(chalk.blue.bold(\"\\nAvailable nocta-ui components:\\n\"));\n\n\t\tObject.entries(categories).forEach(([categoryKey, category]) => {\n\t\t\tconsole.log(chalk.yellow.bold(`${category.name}:`));\n\t\t\tconsole.log(chalk.gray(`  ${category.description}\\n`));\n\n\t\t\tconst categoryComponents = components.filter(\n\t\t\t\t(comp) => comp.category === categoryKey,\n\t\t\t);\n\n\t\t\tcategoryComponents.forEach((component) => {\n\t\t\t\tconsole.log(chalk.green(`  ${component.name.toLowerCase()}`));\n\t\t\t\tconsole.log(chalk.gray(`    ${component.description}`));\n\n\t\t\t\tif (component.variants && component.variants.length > 0) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\tchalk.blue(`  Variants: ${component.variants.join(\", \")}`),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (component.sizes && component.sizes.length > 0) {\n\t\t\t\t\tconsole.log(chalk.blue(`  Sizes: ${component.sizes.join(\", \")}`));\n\t\t\t\t}\n\n\t\t\t\tconsole.log();\n\t\t\t});\n\t\t});\n\n\t\tconsole.log(chalk.blue(\"\\nAdd a component:\"));\n\t\tconsole.log(chalk.gray(\"  npx nocta-ui add <component-name>\"));\n\n\t\tconsole.log(chalk.blue(\"\\nExamples:\"));\n\t\tconsole.log(chalk.gray(\"  npx nocta-ui add button\"));\n\t\tconsole.log(chalk.gray(\"  npx nocta-ui add card\"));\n\t} catch (error) {\n\t\tspinner.fail(\"Failed to fetch components\");\n\t\tthrow error;\n\t}\n}\n","#!/usr/bin/env node\nimport fs from \"node:fs\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { add } from \"./commands/add.js\";\nimport { init } from \"./commands/init.js\";\nimport { list } from \"./commands/list.js\";\n\n// Read package.json in ESM context\nconst packageJsonUrl = new URL(\"../package.json\", import.meta.url);\nconst packageJson = JSON.parse(fs.readFileSync(packageJsonUrl, \"utf8\"));\n\nconst program = new Command();\n\nprogram\n\t.name(\"nocta-ui\")\n\t.description(\"CLI for Nocta UI Components Library\")\n\t.version(packageJson.version);\n\nprogram\n    .command(\"init\")\n    .description(\"Initialize your project with components config\")\n    .option(\"--dry-run\", \"Preview actions without writing or installing\")\n    .action(async (options: { dryRun?: boolean }) => {\n        try {\n            await init({ dryRun: Boolean(options?.dryRun) });\n        } catch (error) {\n            console.error(chalk.red(\"Error:\", error));\n            process.exit(1);\n        }\n    });\n\nprogram\n    .command(\"add\")\n    .description(\"Add components to your project\")\n    .argument(\"<components...>\", \"component names\")\n    .option(\"--dry-run\", \"Preview actions without writing or installing\")\n    .action(async (componentNames: string[], options: { dryRun?: boolean }) => {\n        try {\n            await add(componentNames, { dryRun: Boolean(options?.dryRun) });\n        } catch (error) {\n            console.error(chalk.red(\"Error:\", error));\n            process.exit(1);\n        }\n    });\n\nprogram\n\t.command(\"list\")\n\t.description(\"List all available components\")\n\t.action(async () => {\n\t\ttry {\n\t\t\tawait list();\n\t\t} catch (error) {\n\t\t\tconsole.error(chalk.red(\"Error:\", error));\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\nprogram.on(\"command:*\", () => {\n\tconsole.error(chalk.red(\"Invalid command: %s\"), program.args.join(\" \"));\n\tconsole.log(chalk.yellow(\"See --help for a list of available commands.\"));\n\tprocess.exit(1);\n});\n\nprogram.parse();\n"]}